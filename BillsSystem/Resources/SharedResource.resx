<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Action" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="Actions" xml:space="preserve">
    <value>Actions</value>
  </data>
  <data name="Address" xml:space="preserve">
    <value>Address</value>
  </data>
  <data name="Are you sure you want to delete this?" xml:space="preserve">
    <value>Are you sure you want to delete this?</value>
  </data>
  <data name="Back to List" xml:space="preserve">
    <value>Back to List</value>
  </data>
  <data name="BillDate" xml:space="preserve">
    <value>BillDate</value>
  </data>
  <data name="BillNumber" xml:space="preserve">
    <value>BillNumber</value>
  </data>
  <data name="Bills Details" xml:space="preserve">
    <value>Bills Details</value>
  </data>
  <data name="Bills List" xml:space="preserve">
    <value>Bills List</value>
  </data>
  <data name="Branch ID" xml:space="preserve">
    <value>Branch ID</value>
  </data>
  <data name="Buying Price" xml:space="preserve">
    <value>Buying Price</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="ClientName" xml:space="preserve">
    <value>ClientName</value>
  </data>
  <data name="Clients" xml:space="preserve">
    <value>Clients</value>
  </data>
  <data name="Companies List" xml:space="preserve">
    <value>Companies List</value>
  </data>
  <data name="Company Details" xml:space="preserve">
    <value>Company Details</value>
  </data>
  <data name="Company Information" xml:space="preserve">
    <value>Company Information</value>
  </data>
  <data name="Company Name" xml:space="preserve">
    <value>Company Name</value>
  </data>
  <data name="Company Note" xml:space="preserve">
    <value>Company Note</value>
  </data>
  <data name="CompanyName" xml:space="preserve">
    <value>CompanyName</value>
  </data>
  <data name="CompanyNote" xml:space="preserve">
    <value>CompanyNote</value>
  </data>
  <data name="Create" xml:space="preserve">
    <value>Create</value>
  </data>
  <data name="Create Client" xml:space="preserve">
    <value>Create Client</value>
  </data>
  <data name="Create Company" xml:space="preserve">
    <value>Create Company</value>
  </data>
  <data name="Create Item" xml:space="preserve">
    <value>Create Item</value>
  </data>
  <data name="Create New Bill" xml:space="preserve">
    <value>Create New Bill</value>
  </data>
  <data name="Create New Client" xml:space="preserve">
    <value>Create New Client</value>
  </data>
  <data name="Create New Company" xml:space="preserve">
    <value>Create New Company</value>
  </data>
  <data name="Create New Employee" xml:space="preserve">
    <value>Create New Employee</value>
  </data>
  <data name="Create New Item" xml:space="preserve">
    <value>Create New Item</value>
  </data>
  <data name="Create New Report" xml:space="preserve">
    <value>Create New Report</value>
  </data>
  <data name="Create New Specie" xml:space="preserve">
    <value>Create New Specie</value>
  </data>
  <data name="Create New Unit" xml:space="preserve">
    <value>Create New Unit</value>
  </data>
  <data name="Create Unit" xml:space="preserve">
    <value>Create Unit</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="Delete Company" xml:space="preserve">
    <value>Delete Company</value>
  </data>
  <data name="Delete Specie" xml:space="preserve">
    <value>Delete Specie</value>
  </data>
  <data name="Department ID" xml:space="preserve">
    <value>Department ID</value>
  </data>
  <data name="Details" xml:space="preserve">
    <value>Details</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="Edit Company" xml:space="preserve">
    <value>Edit Company</value>
  </data>
  <data name="Edit Specie" xml:space="preserve">
    <value>Edit Specie</value>
  </data>
  <data name="Employee List" xml:space="preserve">
    <value>Employee List</value>
  </data>
  <data name="First Name" xml:space="preserve">
    <value>First Name</value>
  </data>
  <data name="Item Name" xml:space="preserve">
    <value>Item Name</value>
  </data>
  <data name="Items List" xml:space="preserve">
    <value>Items List</value>
  </data>
  <data name="Last Name" xml:space="preserve">
    <value>Last Name</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Net" xml:space="preserve">
    <value>Net</value>
  </data>
  <data name="Notes" xml:space="preserve">
    <value>Notes</value>
  </data>
  <data name="Other Details" xml:space="preserve">
    <value>Other Details</value>
  </data>
  <data name="PaidUp" xml:space="preserve">
    <value>PaidUp</value>
  </data>
  <data name="PercentageDiscount" xml:space="preserve">
    <value>PercentageDiscount</value>
  </data>
  <data name="Phone" xml:space="preserve">
    <value>Phone</value>
  </data>
  <data name="Position" xml:space="preserve">
    <value>Position</value>
  </data>
  <data name="Quantity" xml:space="preserve">
    <value>Quantity</value>
  </data>
  <data name="Rest" xml:space="preserve">
    <value>Rest</value>
  </data>
  <data name="Sales Invoice" xml:space="preserve">
    <value>Sales Invoice</value>
  </data>
  <data name="Sales Reports" xml:space="preserve">
    <value>Sales Reports</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="SelesReportName" xml:space="preserve">
    <value>SelesReportName</value>
  </data>
  <data name="Selling Price" xml:space="preserve">
    <value>Selling Price</value>
  </data>
  <data name="SellingPrice" xml:space="preserve">
    <value>SellingPrice</value>
  </data>
  <data name="Specie Details" xml:space="preserve">
    <value>Specie Details</value>
  </data>
  <data name="Specie Name" xml:space="preserve">
    <value>Specie Name</value>
  </data>
  <data name="Species List" xml:space="preserve">
    <value>Species List</value>
  </data>
  <data name="Species Name" xml:space="preserve">
    <value>Species Name</value>
  </data>
  <data name="TotalValue" xml:space="preserve">
    <value>TotalValue</value>
  </data>
  <data name="Unit Details" xml:space="preserve">
    <value>Unit Details</value>
  </data>
  <data name="Unit List" xml:space="preserve">
    <value>Unit List</value>
  </data>
  <data name="Unit Name" xml:space="preserve">
    <value>Unit Name</value>
  </data>
  <data name="Unit Note" xml:space="preserve">
    <value>Unit Note</value>
  </data>
  <data name="ValueDiscount" xml:space="preserve">
    <value>ValueDiscount</value>
  </data>
</root>